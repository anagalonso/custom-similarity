package es.gob.minetad.custom.function;

import java.util.Arrays;
import java.util.Iterator;
import java.util.List;

import org.apache.lucene.queries.function.FunctionQuery;
import org.apache.lucene.queries.function.ValueSource;
import org.apache.lucene.queries.function.valuesource.QueryValueSource;
import org.apache.lucene.search.Query;
import org.apache.solr.common.params.ModifiableSolrParams;
import org.apache.solr.common.params.SolrParams;
import org.apache.solr.request.SolrQueryRequest;
import org.apache.solr.search.FunctionQParserPlugin;
import org.apache.solr.search.QParser;
import org.apache.solr.search.QParserPlugin;
import org.apache.solr.search.QueryParsing;
import org.apache.solr.search.SyntaxError;

import es.gob.minetad.util.Util;

public class FunctionRangeQParserPluginExt extends QParserPlugin {
	  public static final String NAME = "frangeext";
	  List<Double> shape=null;
	  
	  @Override
	  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {
		 
		 ModifiableSolrParams paramsdos=new ModifiableSolrParams(params);
		
		shape=Arrays.asList(Util.getVectorFromText(params.get("qq"), params.get("model")));
		String consulta=Util.getQuery(Util.getVectorString(Util.cleanZerosDocTopicVector(shape), params.get("prefix")), 10000);
		//System.out.println(consulta);
		paramsdos.remove("qq");
		//provisional para pruebas
		if (params.getBool("pruebas", true)){
		consulta="sumTotalTermFreq(listaBO:Patstat_750_142|3375) sumTotalTermFreq(listaBO:Patstat_750_425|3375) sumTotalTermFreq(listaBO:Patstat_750_546|3250) listaBO:Patstat_750_142^6625 listaBO:Patstat_750_425^6625 listaBO:Patstat_750_546^6750";
		shape= Arrays.asList(
	    		
		 		);
		}
		
		paramsdos.set("qq", consulta);
		paramsdos.set("shape", Util.getVectorString(shape)); 
		req.setParams(paramsdos);
		 
		  QParser pp=   new QParser(qstr, localParams, paramsdos, req) {
		  ValueSource  vs;
	      String funcStr;
	      

	      @Override
	      public Query parse() throws SyntaxError {
	        funcStr = localParams.get(QueryParsing.V, null);
	        QParser subParser = subQuery(funcStr, FunctionQParserPlugin.NAME);
	        subParser.setIsFilter(false);  // the range can be based on the relevancy score of embedded queries.
	       
	        Query funcQ = subParser.getQuery();
	        if (funcQ instanceof FunctionQuery) {
	        	vs =  ((FunctionQuery)funcQ).getValueSource();
	        } else {
	         vs = new QueryValueSource(funcQ, 0.0f);
	        }

	        String l = localParams.get("l");
	        String u = localParams.get("u");
	        boolean includeLower = localParams.getBool("incl",true);
	        boolean includeUpper = localParams.getBool("incu",true);
	        /*String[] vectorS=params.get("vector").split(",");	        
	        Double[] vector = new Double[vectorS.length];
	        for(int i=0; i<vectorS.length;i++){
	        	vector[i]=Double.parseDouble(vectorS[i]);
	        }*/
	      
	        ValueSourceRangeFilterExt rf = new ValueSourceRangeFilterExt(vs, l, u, includeLower, includeUpper, shape,Float.parseFloat(params.get("multiplicationFactor")));
	        System.out.println("unos::"+rf.getDocuments().size());
	        FunctionRangeQueryExt frq =new FunctionRangeQueryExt(rf);
	        
	        
	      
	        return frq;
	      }
	    };
	    
	    
	    return pp;
	  }

	 
	  
	}


